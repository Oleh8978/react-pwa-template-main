{"version":3,"sources":["views/Home/home.module.css","components/Logo/logo.module.css","assets/svg/logo.svg","components/Logo/index.tsx","utils/display/types.ts","utils/display/index.ts","utils/http/index.ts","views/Home/container.ts","views/Home/state.ts","apis/todo.ts","views/Home/index.tsx","routes/index.tsx","containers/application/state.ts","utils/localization/index.ts","app.js","utils/reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["module","exports","Logo","DisplayTypes","src","logo","className","styles","appLogo","alt","HTTP","axios","create","baseURL","process","REACT_APP_API_BASE_URL","interceptors","response","use","successRes","data","error","Promise","reject","useComponentContainer","State","useState","todos","setTodoList","useComponentState","useEffect","get","then","result","catch","Home","t","useTranslation","display","useMediaQuery","query","DESKTOP","MOBILE","Component","app","appHeader","welcomeText","map","completed","title","id","Routes","fallback","exact","path","component","defaultInitialState","appInitiated","loggedIn","ApplicationState","createContainer","initialState","setAppInitFlag","setloginStatus","config","resources","en","translation","require","lng","fallbackLng","default","debug","interpolation","escapeValue","i18n","initReactI18next","init","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","Sentry","dsn","REACT_APP_SENTRY_DSN","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.094dfd63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"home_app__3x3L-\",\"appHeader\":\"home_appHeader__Dt_qX\",\"welcomeText\":\"home_welcomeText__2yNHf\",\"completed\":\"home_completed__DJZM7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appLogo\":\"logo_appLogo__1inYK\",\"appLogoSpin\":\"logo_appLogoSpin__30bTw\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from 'assets/svg/logo.svg';\nimport styles from './logo.module.css';\n\nfunction Logo() {\n  return (\n    <div>\n      <img src={logo} className={styles.appLogo} alt='logo' />\n    </div>\n  );\n}\n\nexport default Logo;\n","export enum DisplayTypes {\n  DESKTOP = 'DESKTOP',\n  MOBILE = 'MOBILE',\n}\n","import { useMediaQuery } from 'react-responsive';\nimport { DisplayTypes } from './types';\n\nexport const useDisplayType = () => {\n  const isDesktop = useMediaQuery({ query: '(min-width: 1224px)' });\n  return isDesktop ? DisplayTypes.DESKTOP : DisplayTypes.MOBILE;\n};\n","import axios, { AxiosError, AxiosResponse } from 'axios';\n\n// Set config defaults\nconst HTTP = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n});\n\n// All HTTP request/response interceptor\nHTTP.interceptors.response.use(\n  function (successRes: AxiosResponse) {\n    return successRes?.data;\n  },\n  function (error: AxiosError) {\n    return Promise.reject(error);\n  },\n);\n\nexport default HTTP;\n","import { getTodos } from 'apis/todo';\nimport { useEffect } from 'react';\nimport { useComponentState } from './state';\n\nexport const useComponentContainer = () => {\n  const State = useComponentState();\n\n  useEffect(() => {\n    getTodos()\n      .then((result) => State.setTodoList(result))\n      .catch(() => State.setTodoList([]));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return {\n    State,\n  };\n};\n","import { useState } from 'react';\nimport { todoItem } from 'types/todos';\n\nexport const useComponentState = () => {\n  let [todos, setTodoList] = useState<todoItem[]>([]);\n  return {\n    todos,\n    setTodoList,\n  };\n};\n","import { todoItem } from 'types/todos';\nimport HTTP from 'utils/http';\n\nexport const getTodos = (): Promise<todoItem[]> => {\n  return HTTP.get('users/1/todos');\n};\n","import Logo from 'components/Logo';\nimport { useTranslation } from 'react-i18next';\nimport { useDisplayType } from 'utils/display';\nimport { DisplayTypes } from 'utils/display/types';\nimport { useComponentContainer } from './container';\nimport styles from './home.module.css';\n\nfunction Home() {\n  const { t } = useTranslation();\n  const display = useDisplayType();\n  const Component = useComponentContainer();\n\n  return (\n    <div className={styles.app}>\n      <header className={styles.appHeader}>\n        <Logo />\n        <p className={styles.welcomeText}>{t('welcome')}</p>\n        {display === DisplayTypes.DESKTOP ? <p>Desktop</p> : <p>Mobile</p>}\n        {Component.State.todos.map((t) => (\n          <div className={t.completed ? styles.completed : ''} key={t.id}>\n            {t.title}\n          </div>\n        ))}\n      </header>\n    </div>\n  );\n}\n\nexport default Home;\n","/**\n * @name routes/index.tsx\n * @fileoverview Exports the frontend application's Router component,\n * Imports all the views defined in /views,\n * Each Route renders a React Component (views) out of /views,\n * Views are react components composed out of other react components from /components.\n */\n\nimport { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from 'views/Home';\n\nconst Routes = () => {\n  return (\n    <div className='app-container'>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path={'/'} component={Home} />\n        </Switch>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default Routes;\n","import { useState } from 'react';\nimport { createContainer } from 'unstated-next';\nimport { ApplicationStateProps } from './types';\n\nconst defaultInitialState: ApplicationStateProps = {\n  appInitiated: false,\n  loggedIn: false,\n};\n\nconst useApplicationState = (initialState = defaultInitialState) => {\n  // State Properties\n  let [appInitiated, setAppInitFlag] = useState(initialState.appInitiated);\n  let [loggedIn, setloginStatus] = useState(initialState.loggedIn);\n\n  return {\n    appInitiated,\n    loggedIn,\n    setAppInitFlag,\n    setloginStatus,\n  };\n};\n\n// Export Application Context\nexport const ApplicationState = createContainer(useApplicationState);\n","/**\n * @fileoverview Initializes and exports the initialized i18next instance\n */\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nconst en_Locales = require('assets/translations/en.json');\n\nconst resources = {\n  en: { translation: en_Locales },\n};\n\nconst config = {\n  resources,\n  lng: 'en',\n  fallbackLng: {\n    default: ['en'],\n  },\n  debug: true,\n  interpolation: {\n    escapeValue: false,\n  },\n};\ni18n.use(initReactI18next).init(config);\n\nexport default i18n;\n","/**\n * @name app.js\n * @fileoverview Exports the frontend application as <App/> Component,\n * Initialises Application Routes using react-router and React components from /views.\n * Renders global state providers.\n */\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Routes from 'routes';\nimport { ApplicationState } from 'containers/application/state';\nimport 'utils/localization';\n\nconst App = () => {\n  return (\n    <ApplicationState.Provider>\n      <Router>\n        <Routes />\n      </Router>\n    </ApplicationState.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app';\nimport reportWebVitals from 'utils/reportWebVitals';\nimport * as Sentry from '@sentry/react';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport 'index.css';\n\n// initialize the Sentry React SDK as soon as possible\nSentry.init({ dsn: process.env.REACT_APP_SENTRY_DSN });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}